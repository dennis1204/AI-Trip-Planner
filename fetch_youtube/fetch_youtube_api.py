from youtube_transcript_api import YouTubeTranscriptApi
print(YouTubeTranscriptApi)
import yt_dlp  # For audio download if no transcript
from openai import AzureOpenAI  # Your Azure setup
from dotenv import load_dotenv
import os

# Load .env file
load_dotenv()

# Env vars (already set)
endpoint = os.getenv("AZURE_ENDPOINT")
subscription_key = os.getenv("AZURE_API_KEY")
model_name = "gpt-5-mini"
deployment = "gpt-5-mini"
api_version = "2024-12-01-preview"

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    api_key=subscription_key,
)
ytt_api = YouTubeTranscriptApi()
def get_transcript(video_id):
    try:
        # Try to get transcript with preferred languages
        transcript_list = ytt_api.list('video_id')
# iterate over all available transcripts
        # for transcript in transcript_list:

        # # the Transcript object provides metadata properties
        #     print(
        #         transcript.video_id,
        #         transcript.language,
        #         transcript.language_code,
        #         # whether it has been manually created or generated by YouTube
        #         transcript.is_generated,
        #         # whether this transcript can be translated or not
        #         transcript.is_translatable,
        #         # a list of languages the transcript can be translated to
        #         transcript.translation_languages,
        #     )

        transcript = transcript_list.find_generated_transcript(['zh-HK'])
        print(transcript)
        # transcript = YouTubeTranscriptApi().fetch(video_id, languages=['en', 'zh-HK'])
        return ' '.join([item['text'] for item in transcript])
    except Exception as e:
        print(f"No transcript available: {e}")
        return None 

# def get_transcript(video_id):
#     try:
#         transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en', 'zh-HK'])  # English or Cantonese
#         return ' '.join([item['text'] for item in transcript])
#     except Exception as e:
#         print(f"No transcript: {e}")
#         return download_and_transcribe(video_id)

# def download_and_transcribe(video_id):
    # url = f"https://www.youtube.com/watch?v={video_id}"
    # ydl_opts = {'format': 'bestaudio', 'outtmpl': 'audio.mp3'}
    # with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    #     ydl.download([url])
    # # Transcribe with Whisper (Azure OpenAI supports audio models)
    # with open("audio.mp3", "rb") as audio_file:
    #     response = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
    # return response.text
    # pass
def download_and_transcribe(video_id):
    try:
        url = f"https://www.youtube.com/watch?v={video_id}"
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': 'audio_%(id)s.%(ext)s',
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        audio_file = f"audio_{video_id}.mp3"

        # Split if over 20MB to be safe
        if os.path.getsize(audio_file) > 20 * 1024 * 1024:
            os.system(f"ffmpeg -i {audio_file} -segment_time 300 -f segment -c copy audio_{video_id}_part%d.mp3")
            os.remove(audio_file)
            audio_files = [f for f in os.listdir('.') if f.startswith(f"audio_{video_id}_part")]
        else:
            audio_files = [audio_file]

        transcript_text = ""
        for af in audio_files:
            with open(af, "rb") as audio_file_obj:
                response = client.audio.transcriptions.create(
                    model="whisper-001",
                    file=audio_file_obj,
                    language="zh-HK",
                    prompt="以下內容為廣東話對話，請以廣東話轉錄。請確保完全使用繁體字廣東話。"
                )
                transcript_text += response.text + " "

        return transcript_text.strip()
    except Exception as e:
        print(f"Transcription failed: {e}")
        return None
    finally:
        for ext in ['webm', 'opus', 'mp3']:
            for f in os.listdir('.'):
                if f.startswith(f"audio_{video_id}") and f.endswith(ext):
                    os.remove(f)

video_id = "zRR37i-SodU"

print("Falling back to audio transcription...")
transcript_text = download_and_transcribe(video_id)
if transcript_text:
    print(f"Transcribed text: {transcript_text}")
else:
    print("Failed to retrieve transcript.")
# download_and_transcribe(video_id)
# transcript_text = get_transcript(video_id)
# if transcript_text:
#     print(f"Transcript: {transcript_text}")
# else:
#     print("No captions found; consider audio transcription.")
